This is README.info, produced by makeinfo version 5.2 from README.texi.

INFO-DIR-SECTION Emacs
START-INFO-DIR-ENTRY
* Bufler: (bufler).     Like Ibuffer, with flexible grouping in hierarchical sections.
END-INFO-DIR-ENTRY


File: README.info,  Node: Top,  Next: Screenshots,  Up: (dir)

Bufler.el
*********

* Menu:

* Screenshots::
* Installation::
* Usage::
* Changelog::
* Credits::
* Development::
* License::

— The Detailed Node Listing —



Usage

* Bindings::
* Defining groups::



Changelog

* 0.2-pre: 02-pre. 
* 0.1: 01. 

Bufler is like a butler for your buffers, presenting them to you in an
organized way based on your instructions.  The instructions are written
as grouping rules in a simple language, allowing you to customize the
way buffers are grouped.  The default instructions are designed to be
generally useful, so you don’t have to write your own rules.


File: README.info,  Node: Screenshots,  Next: Installation,  Prev: Top,  Up: Top

1 Screenshots
*************

In the default Emacs theme:

   This screenshot shows group faces themed by prism
(https://github.com/alphapapa/prism.el), which Bufler optionally
supports.  (*Note:* This screenshot is of an older version of the
package, but is still accurate except for the name.)


File: README.info,  Node: Installation,  Next: Usage,  Prev: Screenshots,  Up: Top

2 Installation
**************

Use quelpa-use-package (https://github.com/quelpa/quelpa-use-package),
like this:

     (use-package bufler
       :quelpa (bufler :fetcher github :repo "alphapapa/bufler.el"))


File: README.info,  Node: Usage,  Next: Changelog,  Prev: Installation,  Up: Top

3 Usage
*******

Run one of these commands.  You can customize settings in the bufler
group.

‘bufler’
     Show the Bufler buffer list.
‘bufler-mode’
     Enable the Bufler workspace mode, which allows each frame to have a
     chosen workspace from Bufler’s groups.
‘bufler-switch-buffer’
     Switch to a buffer selected from the frame’s workspace.  With
     prefix, select from all buffers and change the frame’s workspace.
‘bufler-frame-workspace’
     Set the frame’s workspace.  Setting the workspace is done
     automatically by bufler-switch-buffer, but this command may be used
     to set the workspace to a group containing other groups, after
     which bufler-switch-buffer will present buffers from the selected
     group and its subgroups.
‘bufler-buffer-workspace’
     Set the current buffer’s workspace name.  With prefix, unset it.
     Note that, in order for a buffer to appear in a named workspace,
     the buffer must be matched by an ‘auto-workspace’ group before any
     other group.

* Menu:

* Bindings::
* Defining groups::


File: README.info,  Node: Bindings,  Next: Defining groups,  Up: Usage

3.1 Bindings
============

In the Bufler buffer list, these keys are available (use C-h m to get
the most up-to-date listing).  They operate on all buffers in the
section at point.

   • 1 – 4 Cycle section levels at point.
   • M-1 – M-4 Cycle top-level sections.
   • RET Pop to buffer.
   • g Refresh Bufler list.
   • k Kill buffers.
   • s Save buffers.
   • w Set workspace name.


File: README.info,  Node: Defining groups,  Prev: Bindings,  Up: Usage

3.2 Defining groups
===================

_See the bufler info page to view this information in Emacs._

   The Bufler groups definition is a list stored in variable
bufler-groups.  Each element of the list is either a lambda function
which takes a single argument, a buffer, or a list of such functions.
Each buffer is matched against these functions in order until it does
not match any more functions at that level.  A list of functions defines
a subgroup which short-circuits other groups at the same level,
preventing further grouping outside of the subgroup’s functions.
Ultimately, it’s lambdas all the way down.

   This seems somewhat difficult to explain, so please see the examples.
Once you get the hang of it, it’s powerful and flexible.

   For convenience, the macro bufler-defgroups provides a sort of DSL, a
concise vocabulary for defining groups.  For example, the default groups
are defined like this:

     (bufler-defgroups
       (group
        ;; Subgroup collecting all `help-mode' and `info-mode' buffers.
        (group-or "*Help/Info*"
                  (mode-match "*Help*" (rx bos "help-"))
                  (mode-match "*Info*" (rx bos "info-"))))
       (group
        ;; Subgroup collecting all special buffers (i.e. ones that are not
        ;; file-backed), except `magit-status-mode' buffers (which are allowed to fall
        ;; through to other groups, so they end up grouped with their project buffers).
        (group-and "*Special*"
                   (lambda (buffer)
                     (unless (or (funcall (mode-match "Magit" (rx bos "magit-status"))
                                          buffer)
                                 (funcall (mode-match "Dired" (rx bos "dired"))
                                          buffer)
                                 (funcall (auto-file) buffer))
                       "*Special*")))
        (group
         ;; Subgroup collecting these "special special" buffers
         ;; separately for convenience.
         (name-match "**Special**"
                     (rx bos "*" (or "Messages" "Warnings" "scratch" "Backtrace") "*")))
        (group
         ;; Subgroup collecting all other Magit buffers, grouped by directory.
         (mode-match "*Magit* (non-status)" (rx bos (or "magit" "forge") "-"))
         (auto-directory))
        ;; Subgroup for Helm buffers.
        (mode-match "*Helm*" (rx bos "helm-"))
        ;; Remaining special buffers are grouped automatically by mode.
        (auto-mode))
       ;; All buffers under "~/.emacs.d" (or wherever it is).
       (dir user-emacs-directory)
       (group
        ;; Subgroup collecting buffers in `org-directory' (or "~/org" if
        ;; `org-directory' is not yet defined).
        (dir (if (bound-and-true-p org-directory)
                 org-directory
               "~/org"))
        (group
         ;; Subgroup collecting indirect Org buffers, grouping them by file.
         ;; This is very useful when used with `org-tree-to-indirect-buffer'.
         (auto-indirect)
         (auto-file))
        ;; Group remaining buffers by whether they're file backed, then by mode.
        (group-not "*special*" (auto-file))
        (auto-mode))
       (group
        ;; Subgroup collecting buffers in a version-control project,
        ;; grouping them by directory.
        (auto-project))
       ;; Group remaining buffers by directory, then major mode.
       (auto-directory)
       (auto-mode))

   *Note* that the macro does not _set_ the variable bufler-groups, it
merely expands a groups form, so you should use, e.g.  ‘(setf
bufler-groups (bufler-defgroups ...))’ to actually set the groups.

   The following group types are available in bufler-defgroups.  Note
that each one is expanded into a lambda, so they may also be called by
funcall (see example above).

‘Meta types’
     These types compose multiple of the other types into a single
     group.
        • ‘group (TYPE...)’ Define a subgroup matching given types,
          which short-circuits other groups at the same level.
        • ‘group-not (NAME TYPE)’ Groups buffers which do _not_ match
          the given type.
        • ‘group-and (NAME TYPE...)’ Groups buffers which match all of
          the given types.
        • ‘group-or (NAME TYPE...)’ Groups buffers which match any of
          the given types.
‘Auto-types’
     These types automatically create groups for the buffer’s attribute
     of this type.
        • ‘auto-directory’ Buffer’s directory.
        • ‘auto-file’ Buffer’s file name.
        • ‘auto-hidden’ Whether the buffer is hidden.
        • ‘auto-indirect’ Whether the buffer is indirect (e.g.  a cloned
          indirect buffer).
        • ‘auto-mode’ Buffer’s major mode.
        • ‘auto-project’ Buffer’s version-control project directory
          according to ‘project.el’.
        • ‘auto-special’ Whether the buffer is special (i.e.  whether
          its name starts with ‘*’).
        • ‘auto-tramp’ Whether the buffer is opened via Tramp.
        • ‘auto-workspace’ The buffer’s named workspace, if any.
‘Regexp types’
     These types match a value against a buffer’s attribute and group
     buffers which match.
        • ‘name-match (NAME REGEXP)’ Match a regular expression against
          the buffer’s name.
        • ‘mode-match (NAME REGEXP)’ Match a regular expression against
          the buffer’s major-mode.
‘Other types’
        • ‘dir (DIRS DEPTH)’ Groups buffers which match one of the given
          DIRS. DIRS may be one or a list of directory paths.  DEPTH may
          be nil or a depth above which to produce subdirectory groups
          (a feature probably broken at the moment).  See example above.


File: README.info,  Node: Changelog,  Next: Credits,  Prev: Usage,  Up: Top

4 Changelog
***********

* Menu:

* 0.2-pre: 02-pre. 
* 0.1: 01. 


File: README.info,  Node: 02-pre,  Next: 01,  Up: Changelog

4.1 0.2-pre
===========

Project expanded and renamed from Sbuffer to Bufler.


File: README.info,  Node: 01,  Prev: 02-pre,  Up: Changelog

4.2 0.1
=======

First tagged release.


File: README.info,  Node: Credits,  Next: Development,  Prev: Changelog,  Up: Top

5 Credits
*********

   • Thanks to Jonas Bernoulli (https://github.com/tarsius) for
     magit-section
     (https://github.com/magit/magit/blob/master/lisp/magit-section.el).
   • Thanks to Magnar Sveen (https://github.com/magnars/dash.el) and
     Matus Goljer (https://github.com/Fuco1) for dash.el
     (https://github.com/magnars/dash.el).
   • Thanks to Johan Andersson (https://github.com/rejeep) for f.el
     (https://github.com/rejeep/f.el).


File: README.info,  Node: Development,  Next: License,  Prev: Credits,  Up: Top

6 Development
*************

Bug reports, feature requests, suggestions — _oh my_!


File: README.info,  Node: License,  Prev: Development,  Up: Top

7 License
*********

GPLv3



Tag Table:
Node: Top224
Node: Screenshots888
Node: Installation1268
Node: Usage1563
Node: Bindings2740
Node: Defining groups3219
Node: Changelog9136
Node: 02-pre9282
Node: 019424
Node: Credits9527
Node: Development10072
Node: License10241

End Tag Table


Local Variables:
coding: utf-8
End:
